name: deploy

on:
  push:
    branches: [ master, no-ssr ]

jobs:
  install:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.versionGenerator.outputs.version }}
    steps:
    - uses: actions/setup-node@v2-beta
      with:
        node-version: '10'

    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*

    - name: Generate version
      id: versionGenerator
      run: echo ::set-output name=version::$(git describe --tags --always)
      
    - name: Cache node_modules
      id: cache-node_modules
      uses: actions/cache@v2.0.0
      with:
        path: |
          ~/.npm
          node_modules
          **/node_modules
          ${{ steps.npm-cache.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: ${{ runner.os }}-node-      
    - name: Cache functions node_modules
      id: cache-functions-node_modules
      uses: actions/cache@v2.0.0
      with:
        path: functions/node_modules
        key: ${{ runner.os }}-node-functions-${{ hashFiles('functions/package-lock.json') }}
        restore-keys: ${{ runner.os }}-node-functions-
    
    - name: Install app dependencies
      if: steps.cache-node_modules.outputs.cache-hit != 'true'
      run: npm ci --prefer-offline --no-audit --progress=false
    
    - name: Install functions dependencies
      if: steps.cache-functions-node_modules.outputs.cache-hit != 'true'
      run: npm ci --prefer-offline --no-audit --progress=false
      working-directory: ./functions
      
  build-functions:
    runs-on: ubuntu-latest
    needs: install
    steps:
    - name: Cache node_modules
      id: cache-node_modules
      uses: actions/cache@v2.0.0
      with:
        path: |
          ~/.npm
          node_modules
          **/node_modules
          ${{ steps.npm-cache.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: ${{ runner.os }}-node-
    - name: Cache functions node_modules
      id: cache-functions-node_modules
      uses: actions/cache@v2.0.0
      with:
        path: functions/node_modules
        key: ${{ runner.os }}-node-functions-${{ hashFiles('functions/package-lock.json') }}
        restore-keys: ${{ runner.os }}-node-functions-

    - name: Build functions
      env:
        VERSION: ${{ needs.install.outputs.version }}
      run: npm run build
      working-directory: ./functions
    - uses: actions/upload-artifact@v2
      with:
        name: ${{ runner.os }}-${{ github.job }}-${{ needs.install.outputs.version }}
        path: functions/dist
        
  build-ssr:
    runs-on: ubuntu-latest
    needs: install
    outputs:
      version: ${{ steps.versionGenerator.outputs.version }}
    steps:
    - name: Generate version
      id: versionGenerator
      run: echo ::set-output name=version::SSR-v${{ needs.install.outputs.version }}
      
    - name: Cache node_modules
      id: cache-node_modules
      uses: actions/cache@v2.0.0
      with:
        path: |
          ~/.npm
          node_modules
          **/node_modules
          ${{ steps.npm-cache.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: ${{ runner.os }}-node-
    - name: Cache functions node_modules
      id: cache-functions-node_modules
      uses: actions/cache@v2.0.0
      with:
        path: functions/node_modules
        key: ${{ runner.os }}-node-functions-${{ hashFiles('functions/package-lock.json') }}
        restore-keys: ${{ runner.os }}-node-functions-
        
    - name: Build
      env:
          FIREBASE_APPID: ${{ secrets.FIREBASE_APPID }}
          FIREBASE_AUTHDOMAIN: ${{ secrets.FIREBASE_AUTHDOMAIN }}
          FIREBASE_DATABASEURL: ${{ secrets.FIREBASE_DATABASEURL }}
          FIREBASE_PROJECTID: ${{ secrets.FIREBASE_PROJECTID }}
          FIREBASE_STORAGEBUCKET: ${{ secrets.FIREBASE_STORAGEBUCKET }}
          FIREBASE_MESSAGINGSENDERID: ${{ secrets.FIREBASE_MESSAGINGSENDERID }}
          FIREBASE_MEASUREMENTID: ${{ secrets.FIREBASE_MEASUREMENTID }}
          FIREBASE_APIKEY: ${{ secrets.FIREBASE_APIKEY }}
          PUBLIC_PATH: ${{ secrets.PUBLIC_PATH }}
          VERSION: ${{ steps.versionGenerator.outputs.version }}
      run: npm run build:ssr

    - name: Optimizing images
      run: mogrify -filter Triangle -define filter:support=2 -unsharp 0.25x0.08+8.3+0.045 -dither None -posterize 136 -quality 82 -define jpeg:fancy-upsampling=off -define png:compression-filter=5 -define png:compression-level=9 -define png:compression-strategy=1 -define png:exclude-chunk=all -interlace none -colorspace sRGB *.png
      working-directory: ./public/assets
      
    - uses: actions/upload-artifact@v2
      with:
        name: ${{ runner.os }}-${{ github.job }}-${{ steps.versionGenerator.outputs.version }}
        path: public

  build-csr:
    runs-on: ubuntu-latest
    needs: install
    outputs:
      version: ${{ steps.versionGenerator.outputs.version }}
    steps:
    - name: Generate version
      id: versionGenerator
      run: echo ::set-output name=version::CSR-v${{ needs.install.outputs.version }}

    - name: Cache node_modules
      id: cache-node_modules
      uses: actions/cache@v2.0.0
      with:
        path: |
          ~/.npm
          node_modules
          **/node_modules
          ${{ steps.npm-cache.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: ${{ runner.os }}-node-
    - name: Cache functions node_modules
      id: cache-functions-node_modules
      uses: actions/cache@v2.0.0
      with:
        path: functions/node_modules
        key: ${{ runner.os }}-node-functions-${{ hashFiles('functions/package-lock.json') }}
        restore-keys: ${{ runner.os }}-node-functions-
        
    - name: Build
      env:
          FIREBASE_APPID: ${{ secrets.FIREBASE_APPID }}
          FIREBASE_AUTHDOMAIN: ${{ secrets.FIREBASE_AUTHDOMAIN }}
          FIREBASE_DATABASEURL: ${{ secrets.FIREBASE_DATABASEURL }}
          FIREBASE_PROJECTID: ${{ secrets.FIREBASE_PROJECTID }}
          FIREBASE_STORAGEBUCKET: ${{ secrets.FIREBASE_STORAGEBUCKET }}
          FIREBASE_MESSAGINGSENDERID: ${{ secrets.FIREBASE_MESSAGINGSENDERID }}
          FIREBASE_MEASUREMENTID: ${{ secrets.FIREBASE_MEASUREMENTID }}
          FIREBASE_APIKEY: ${{ secrets.FIREBASE_APIKEY }}
          PUBLIC_PATH: ${{ secrets.PUBLIC_PATH }}
          VERSION: ${{ steps.versionGenerator.outputs.version }}
      run: npm run build:csr

    - name: Optimizing images
      run: mogrify -filter Triangle -define filter:support=2 -unsharp 0.25x0.08+8.3+0.045 -dither None -posterize 136 -quality 82 -define jpeg:fancy-upsampling=off -define png:compression-filter=5 -define png:compression-level=9 -define png:compression-strategy=1 -define png:exclude-chunk=all -interlace none -colorspace sRGB *.png
      working-directory: ./public/assets
      
    - uses: actions/upload-artifact@v2
      with:
        name: ${{ runner.os }}-${{ github.job }}-${{ steps.versionGenerator.outputs.version }}
        path: public
        
  deploy-ssr:
    runs-on: ubuntu-latest
    needs: [build-ssr, install]
    steps:
    - uses: actions/checkout@v2

    - name: Cache node_modules
      id: cache-node_modules
      uses: actions/cache@v2.0.0
      with:
        path: |
          ~/.npm
          node_modules
          **/node_modules
          ${{ steps.npm-cache.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: ${{ runner.os }}-node-      
    - name: Cache functions node_modules
      id: cache-functions-node_modules
      uses: actions/cache@v2.0.0
      with:
        path: functions/node_modules
        key: ${{ runner.os }}-node-functions-${{ hashFiles('functions/package-lock.json') }}
        restore-keys: ${{ runner.os }}-node-functions-

    - uses: actions/download-artifact@v2
      with:
        name: ${{ runner.os }}-build-ssr-${{ needs.build-ssr.outputs.version }}
        path: public
        
#    - name: Install app dependencies
#      if: steps.cache-node_modules.outputs.cache-hit != 'true'
#      run: npm ci --prefer-offline --no-audit --progress=false
#
#    - name: Install functions dependencies
#      if: steps.cache-functions-node_modules.outputs.cache-hit != 'true'
#      run: npm ci --prefer-offline --no-audit --progress=false
#      working-directory: ./functions
        
    - name: Deploy to Firebase
      uses: w9jds/firebase-action@v1.3.1
      env:
        FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        GCLOUD_PROJECT: ${{ secrets.GCLOUD_PROJECT }}
        PROJECT_ID: ${{ secrets.FIREBASE_PROJECTID }}
      with:
        args: deploy --only hosting:template-react-firebase-ssr -f --non-interactive -m \"SSR build v${{ needs.build-ssr.outputs.version }} by $GITHUB_ACTOR from GitHub $GITHUB_WORKFLOW action\"

  deploy-csr:
    runs-on: ubuntu-latest
    needs: [build-csr, install]
    steps:
    - uses: actions/checkout@v2

    - name: Cache node_modules
      id: cache-node_modules
      uses: actions/cache@v2.0.0
      with:
        path: |
          ~/.npm
          node_modules
          **/node_modules
          ${{ steps.npm-cache.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: ${{ runner.os }}-node-      
    - name: Cache functions node_modules
      id: cache-functions-node_modules
      uses: actions/cache@v2.0.0
      with:
        path: functions/node_modules
        key: ${{ runner.os }}-node-functions-${{ hashFiles('functions/package-lock.json') }}
        restore-keys: ${{ runner.os }}-node-functions-

    - uses: actions/download-artifact@v2
      with:
        name: ${{ runner.os }}-build-csr-${{ needs.build-csr.outputs.version }}
        path: public
        
#    - name: Install app dependencies
#      if: steps.cache-node_modules.outputs.cache-hit != 'true'
#      run: npm ci --prefer-offline --no-audit --progress=false
#
#    - name: Install functions dependencies
#      if: steps.cache-functions-node_modules.outputs.cache-hit != 'true'
#      run: npm ci --prefer-offline --no-audit --progress=false
#      working-directory: ./functions
        
    - name: Deploy to Firebase
      uses: w9jds/firebase-action@v1.3.1
      env:
        FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        GCLOUD_PROJECT: ${{ secrets.GCLOUD_PROJECT }}
        PROJECT_ID: ${{ secrets.FIREBASE_PROJECTID }}
      with:
        args: deploy --only hosting:template-react-firebase-no-ssr -f --non-interactive -m \"CSR build v${{ needs.build-csr.outputs.version }} by $GITHUB_ACTOR from GitHub $GITHUB_WORKFLOW action\"

  deploy-functions:
    runs-on: ubuntu-latest
    needs: [build-functions, install]
    steps:
    - uses: actions/checkout@v2

    - name: Cache node_modules
      id: cache-node_modules
      uses: actions/cache@v2.0.0
      with:
        path: |
          ~/.npm
          node_modules
          **/node_modules
          ${{ steps.npm-cache.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: ${{ runner.os }}-node-      
    - name: Cache functions node_modules
      id: cache-functions-node_modules
      uses: actions/cache@v2.0.0
      with:
        path: functions/node_modules
        key: ${{ runner.os }}-node-functions-${{ hashFiles('functions/package-lock.json') }}
        restore-keys: ${{ runner.os }}-node-functions-

    - uses: actions/download-artifact@v2
      with:
        name: ${{ runner.os }}-build-functions-${{ needs.install.outputs.version }}
        path: public
        
#    - name: Install app dependencies
#      if: steps.cache-node_modules.outputs.cache-hit != 'true'
#      run: npm ci --prefer-offline --no-audit --progress=false
#
#    - name: Install functions dependencies
#      if: steps.cache-functions-node_modules.outputs.cache-hit != 'true'
#      run: npm ci --prefer-offline --no-audit --progress=false
#      working-directory: ./functions
        
    - name: Deploy to Firebase
      uses: w9jds/firebase-action@v1.3.1
      env:
        FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        GCLOUD_PROJECT: ${{ secrets.GCLOUD_PROJECT }}
        PROJECT_ID: ${{ secrets.FIREBASE_PROJECTID }}
      with:
        args: deploy --only functions -f --non-interactive -m \"Functions build v${{ needs.install.outputs.version }} by $GITHUB_ACTOR from GitHub $GITHUB_WORKFLOW action\"

#  audit:
#    runs-on: ubuntu-latest
#    needs: deploy
#    steps:
#    - name: Audit URLs using Lighthouse
#      uses: treosh/lighthouse-ci-action@v3
#      with:
#        urls: https://react-firebase-ssr.ridermansb.dev/
#        budgetPath: .github/workflows/budget.json
#        uploadArtifacts: true
#        configPath: .github/workflows/lighthouserc.json
#        temporaryPublicStorage: true