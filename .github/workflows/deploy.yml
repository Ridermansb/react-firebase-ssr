name: deploy

on:
  push:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.versionGenerator.outputs.version }}
    steps:
    - uses: actions/setup-node@v2-beta
      with:
        node-version: '10'

    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*
      
    # Cache node_modules
    - name: Cache node_modules
      id: cache-node_modules
      uses: actions/cache@v2.0.0
      with:
        path: |
          ~/.npm
          node_modules
          **/node_modules
          ${{ steps.npm-cache.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: ${{ runner.os }}-node-      
    
    # Cache functions/node_modules
    - name: Cache functions node_modules
      id: cache-functions-node_modules
      uses: actions/cache@v2.0.0
      with:
        path: functions/node_modules
        key: ${{ runner.os }}-node-functions-${{ hashFiles('functions/package-lock.json') }}
        restore-keys: ${{ runner.os }}-node-functions-
    
    - name: Install app dependencies
      if: steps.cache-node_modules.outputs.cache-hit != 'true'
      run: npm ci --prefer-offline --no-audit --progress=false
    
    - name: Install functions dependencies
      if: steps.cache-functions-node_modules.outputs.cache-hit != 'true'
      run: npm ci --prefer-offline --no-audit --progress=false
      working-directory: ./functions

    - name: Generate version
      id: versionGenerator
      run: echo ::set-output name=version::$(git describe --tags --always)
    
    - name: Build app
      env:
          FIREBASE_APPID: ${{ secrets.FIREBASE_APPID }}
          FIREBASE_AUTHDOMAIN: ${{ secrets.FIREBASE_AUTHDOMAIN }}
          FIREBASE_DATABASEURL: ${{ secrets.FIREBASE_DATABASEURL }}
          FIREBASE_PROJECTID: ${{ secrets.FIREBASE_PROJECTID }}
          FIREBASE_STORAGEBUCKET: ${{ secrets.FIREBASE_STORAGEBUCKET }}
          FIREBASE_MESSAGINGSENDERID: ${{ secrets.FIREBASE_MESSAGINGSENDERID }}
          FIREBASE_MEASUREMENTID: ${{ secrets.FIREBASE_MEASUREMENTID }}
          FIREBASE_APIKEY: ${{ secrets.FIREBASE_APIKEY }}
          PUBLIC_PATH: ${{ secrets.PUBLIC_PATH }}
          VERSION: ${{ steps.versionGenerator.outputs.version }}
      run: NODE_ENV=production npm run build      
    
    - name: Build functions
      env:
          VERSION: ${{ steps.versionGenerator.outputs.version }}
      run: NODE_ENV=production npm run build
      working-directory: functions
      
    - uses: actions/upload-artifact@v2
      with:
        name: ${{ runner.os }}-public-${{ steps.versionGenerator.outputs.version }}
        path: public
    - uses: actions/upload-artifact@v2
      with:
        name: ${{ runner.os }}-dist-${{ steps.versionGenerator.outputs.version }}
        path: functions/dist
        
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v2

      # Cache node_modules
    - name: Cache node_modules
      id: cache-node_modules
      uses: actions/cache@v2.0.0
      with:
        path: |
          ~/.npm
          node_modules
          **/node_modules
          ${{ steps.npm-cache.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: ${{ runner.os }}-node-      

      # Cache functions/node_modules
    - name: Cache functions node_modules
      id: cache-functions-node_modules
      uses: actions/cache@v2.0.0
      with:
        path: functions/node_modules
        key: ${{ runner.os }}-node-functions-${{ hashFiles('functions/package-lock.json') }}
        restore-keys: ${{ runner.os }}-node-functions-

    - uses: actions/download-artifact@v2
      with:
        name: ${{ runner.os }}-public-${{ needs.build.outputs.version }}
        path: public
    - uses: actions/download-artifact@v2
      with:
        name: ${{ runner.os }}-dist-${{ needs.build.outputs.version }}
        path: functions/dist
        
    - name: Install app dependencies
      if: steps.cache-node_modules.outputs.cache-hit != 'true'
      run: npm ci --prefer-offline --no-audit --progress=false

    - name: Install functions dependencies
      if: steps.cache-functions-node_modules.outputs.cache-hit != 'true'
      run: npm ci --prefer-offline --no-audit --progress=false
      working-directory: ./functions
        
    - name: Deploy to Firebase
      uses: w9jds/firebase-action@v1.3.1
      env:
        FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        GCLOUD_PROJECT: ${{ secrets.GCLOUD_PROJECT }}
        PROJECT_ID: ${{ secrets.FIREBASE_PROJECTID }}
      with:
        args: deploy -f --non-interactive -m \"v${{ needs.build.outputs.version }} by $GITHUB_ACTOR from GitHub $GITHUB_WORKFLOW action\"

  audit:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: Audit URLs using Lighthouse
      uses: treosh/lighthouse-ci-action@v3
      with:
        urls: |
          https://react-firebase-ssr.ridermansb.dev/
        budgetPath: ./budget.json
        uploadArtifacts: true
#        configPath: ./lighthouserc.json
        temporaryPublicStorage: true